-- @path physical=/ProjektMiASI2/metamodels/physicalDiagram.ecore
-- @path conceptual=/ProjektMiASI2/metamodels/conceptualDiagram.ecore

module conceptual2physical;
create OUT : physical from IN : conceptual;

-- do zrobienia:
-- dodawanie typu do każdego property(conceptual) - zrobione
-- dodawanie ID do tabeli jeśli nie istnieje(nowa kolumna o nazwie ID) - zrobione
-- dodawanie klucza obcego do tabeli (nowa kolumna z odpowiednimi property) - zrobione
-- stworzenie tabeli pośredniej dla połączenia wiele do wielu - zrobione

-- Helper do sprawdzania czy tablica posiada klucz główny
helper context conceptual!Table def: hasID() : Boolean =
  self.Properties->exists(a |
    a.Name.toLower() = 'id' or
    a.Name.toLower() = self.Name.toLower() + 'id'
  );

-- Helper do sprawdzania czy parametr jest kluczem głównym
helper context conceptual!Table def: hasIDNamed(Name : String) : Boolean =
   Name.toLower() = 'id' or Name.toLower() = self.Name.toLower() + 'id';

-- Helper do sprawdzania relacji wiele do wielu
helper context conceptual!Relationship def: isManyToMany() : Boolean =
  self.SourceRelationType.toString() = 'Many' and		--poprawić na sprawdzanie many bo to nie działa :c
  self.TargetRelationType.toString() = 'Many';


rule CreateTable {
	from
		s : conceptual!Table
	to 
		table : physical!Table (
			Name <- s.Name,
			Columns <- 
				s.Properties->collect(prop | thisModule.attribute2column(prop, s.hasIDNamed(prop.Name)))
				-> union(
					if not s.hasID() then
						Sequence { thisModule.createIDcolumn(s.Name)}
					else Sequence {} 
					endif
				)
				->union(
					conceptual!Relationship.allInstances()
						->select(r | 
							(r.SourceTable = s and r.TargetRelationType.toString() = 'One') or
							(r.TargetTable = s and r.SourceRelationType.toString() = 'One')
						)
						->collect(r | thisModule.createForeignKeyColumn(s, r))
				)
		)
}

lazy rule attribute2column {
   from
      s : conceptual!Property,
      isKey : Boolean
   to
      t : physical!Column (
         Name <- s.Name,
		 PrimaryKey <- isKey,
		 Type <- 'Integer',
		 IsNullable <- false,
		 IsUnique <- isKey
      )
}

lazy rule createIDcolumn {
	from
		s: String
	to
		t : physical!Column (
			Name <- s + 'ID',
			PrimaryKey <- true,
			IsUnique <- true,
			Type <- 'Integer',
		 	IsNullable <- false
		)
}

lazy rule createForeignKeyColumn {
	from
		s : conceptual!Table,
		r : conceptual!Relationship
	to
		fk : physical!Column (
			Name <- 
				if r.SourceTable = s then r.TargetTable.Name + 'ID'
				else r.SourceTable.Name + 'ID' endif,
			Type <- 'Integer',
			ForeignKey <- if r.SourceTable = s then r.TargetTable else r.SourceTable endif
		)
}

rule CreateRelationship {
	from
		s : conceptual!Relationship (not s.isManyToMany())
	to 
		t : physical!Relationship(
			test <- s.SourceRelationType.toString(),
			SourceRelationTyp <- s.SourceRelationType,
			SourceTable <- thisModule.resolveTemp(s.SourceTable, 'table'),
			TargetRelationType <- s.TargetRelationType,
			TargetTable <- thisModule.resolveTemp(s.TargetTable, 'table')
		)
}

rule CreateManyToMany {
	from
		s : conceptual!Relationship (s.isManyToMany())
	to 
		helperTable : physical!Table (
			Name <- s.SourceTable.Name + s.TargetTable.Name,
			Columns <- Sequence {
				primaryKey,
				sourceID,
				targetID
			}
		),
		sourceID : physical!Column (
			Name <- s.SourceTable.Name + 'ID',
			ForeignKey <- s.SourceTable,
			Type <- 'Integer'
		),
		targetID : physical!Column (
			Name <- s.TargetTable.Name + 'ID',
			ForeignKey <- s.TargetTable,
			Type <- 'Integer'
		),
		primaryKey : physical!Column (
			Name <- s.SourceTable.Name + s.TargetTable.Name + 'ID',
			PrimaryKey <- true,
			IsUnique <- true,
			Type <- 'Integer'
		),
		relationTarget : physical!Relationship (
			SourceRelationTyp <- 'Many',			--tu trzeba jakoś przypisać wartość enum na Many
			SourceTable <- helperTable,
			TargetRelationType <- 'One',		--tu trzeba jakoś przypisać wartość enum na One
			TargetTable <- thisModule.resolveTemp(s.TargetTable, 'table')
		),
		relationSource : physical!Relationship (
			SourceRelationTyp <- 'One',			--tu trzeba jakoś przypisać wartość enum na One
			SourceTable <- thisModule.resolveTemp(s.SourceTable, 'table'),
			TargetRelationType <- 'Many',		--tu trzeba jakoś przypisać wartość enum na Many
			TargetTable <- helperTable
		)
}
